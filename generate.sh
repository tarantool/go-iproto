#!/usr/bin/env bash

set -xeo pipefail

if [[ -z "$TT_TAG" ]]; then
	echo "Environment variable TT_TAG is not set."
	exit 1
fi

if [[ -z "${TT_REPO}" ]]; then
	TT_REPO="https://github.com/tarantool/tarantool.git"
fi

TT_DIR=tarantool

# Cleanup.
rm -rf ${TT_DIR}

git clone --depth 1 --branch ${TT_TAG} ${TT_REPO} -o ${TT_DIR}
cd ${TT_DIR}
TT_COMMIT=$(git log -n 1 | head -n 1 | sed "s/commit //")
cd ..

SRC_CONST=${TT_DIR}/src/box/iproto_constants.h
SRC_ERRORS=${TT_DIR}/src/box/errcode.h
SRC_EXECUTE=${TT_DIR}/src/box/execute.h
SRC_FEATURES=${TT_DIR}/src/box/iproto_features.h
SRC_ITERATORS=${TT_DIR}/src/box/iterator_type.h
DST_DOC=doc.go
DST_ERRORS=error.go
DST_ERRORS_TEST=error_test.go
DST_FEATURES=feature.go
DST_FEATURES_TEST=feature_test.go
DST_FLAGS=flag.go
DST_FLAGS_TEST=flag_test.go
DST_ITERATORS=iterator.go
DST_ITERATORS_TEST=iterator_test.go
DST_TYPES=type.go
DST_TYPES_TEST=type_test.go
DST_KEYS=keys.go
DST_KEYS_TEST=keys_test.go

# Cleanup.
rm -rf ${DST_DOC} \
	${DST_ERRORS} ${DST_ERRORS_TEST} \
	${DST_FEATURES} ${DST_FEATURES_TEST} \
	${DST_FLAGS} ${DST_FLAGS_TEST} \
	${DST_TYPES} ${DST_TYPES_TEST} \
	${DST_KEYS} ${DST_KEYS_TEST}

FOOTER="// Code generated by generate.sh; DO NOT EDIT.

package iproto
"

FOOTER_TEST="// Code generated by generate.sh; DO NOT EDIT.

package iproto_test

import (
	\"testing\"

	\"github.com/tarantool/go-iproto\"
)

"

# read_enum read C enum values.
# arg1 - enum name in C code.
# arg2 - path to a C code.
function read_enum {
	grep -Pzo "(?s)enum ${1} \{.+?\};" "${2}" | grep -aP "^\t"
}

# generate_enum generates a Golang style enum from a C enum.
# arg1 - enum name in Golang.
function generate_enum {
	echo "type ${1} int

const ("
	# Remove a constant without value.
	sed "/^[\t ]*[a-zA-Z_]\+,\?$/d" | \
		# Remove a begin comment line.
		sed "/^[\t ]*\/\*\+[\t ]*$/d" | \
		# Remove an end comment line.
		sed "/^[\t ]*\*\+\/[\t ]*$/d" | \
		# Remove an end of a comment.
		sed "s/[\t ]*\*\+\///" | \
		# Transform comments into a Golang style from at a start of a line.
		sed "s/^[\t ]*[ \/]\*\+/\t\/\//" | \
		# Transform comments into a Golang style in a middle of a line.
		sed "s/\/\*/\/\//" | \
		# Remove a coma from an end of a value.
		sed "/^[\t ]*[A-Z0-9_]\+[\t ]\+=/s/,//" | \
		# Insert type.
		sed "/^[\t ]*[A-Z0-9_]\+[\t ]\+=/s/ = / ${1} = /"
	echo ")"
}

# generate_test generates a Golang test for a Golang enum from a C enum.
# arg1 - enum name in Golang.
function generate_test {
echo "func Test${1}(t *testing.T) {
	cases := []struct{
		${1} iproto.${1}
		Str  string
		Val  int
	} {
"

grep -oP "[\t ]+[A-Z0-9_]+[\t ]+=[\t ]+[\-0-9xa-f <]+" | \
	awk '{val=$1;$1=$2="";printf("\t\t{iproto.%s, \"%s\",%s},\n", val, val, $0)}'

echo "	}

	for _, tc := range cases {
		t.Run(tc.Str, func(t *testing.T) {
			if tc.${1}.String() != tc.Str {
				t.Errorf(\"Got %s, expected %s\", tc.${1}.String(), tc.Str)
			}
			if int(tc.${1}) != tc.Val {
				t.Errorf(\"Got %d, expected %d\", tc.${1}, tc.Val)
			}
		})
	}
}
"
}

#
# Doc.
#

cat << EOF > ${DST_DOC}
// Package iproto contains IPROTO constants.
//
// The package code generated from:
//
//   Repository: ${TT_REPO}
//   Tag or branch: ${TT_TAG}
//   Commit: ${TT_COMMIT}
package iproto

// Code generated by generate.sh; DO NOT EDIT.
EOF

#
# Errors.
#

echo "${FOOTER}" > ${DST_ERRORS}
cat << EOF >> ${DST_ERRORS}
// IPROTO error code constants, generated from
// ${SRC_ERRORS}
type Error int

const (
EOF

grep "(ER_" ${SRC_ERRORS} | \
	# Remove comments symbols.
	sed "s/\/\*//" | \
	sed "s/\*\/_(//" | \
	# Remove and of values.
	sed "s/) *\\\//" | \
	# Remove comma at an end of a value.
	sed "s/,/ /" | \
	# Finally print parsed values in Golang format.
	awk '{
		com="";
		for(i=3;i<=NF;i++){com=com" "$i};
		printf("\t//%s\n\t%s Error = %s\n", com, $2, $1)
	}' >> ${DST_ERRORS}

echo ")" >> ${DST_ERRORS}

echo "${FOOTER_TEST}" > ${DST_ERRORS_TEST}
cat << EOF >> ${DST_ERRORS_TEST}
func TestError(t *testing.T) {
	cases := []struct{
		Err iproto.Error
		Str string
	} {
EOF

grep -o "ER_[A-Z0-9_]\+," ${SRC_ERRORS} | \
	sed "s/,$//" | \
	awk '{printf("\t\t{iproto.%s, \"%s\"},\n", $1, $1)}' >> ${DST_ERRORS_TEST}

cat << EOF >> ${DST_ERRORS_TEST}
	}

	for i, tc := range cases {
		t.Run(tc.Str, func(t *testing.T) {
			if tc.Err.String() != tc.Str {
				t.Errorf("Got %s, expected %s", tc.Err.String(), tc.Str)
			}
			if int(tc.Err) != i {
				t.Errorf("Got %d, expected %d", tc.Err, i)
			}
		})
	}
}
EOF

#
# Features.
#

echo "${FOOTER}" > ${DST_FEATURES}
cat << EOF >> ${DST_FEATURES}
// IPROTO feature constants, generated from
// ${SRC_FEATURES}
EOF

read_enum iproto_feature_id ${SRC_FEATURES} | \
	generate_enum Feature >> ${DST_FEATURES}

echo "${FOOTER_TEST}" > ${DST_FEATURES_TEST}

read_enum iproto_feature_id ${SRC_FEATURES} | \
	generate_test Feature >> ${DST_FEATURES_TEST}

#
# Flags.
#

echo "${FOOTER}" > ${DST_FLAGS}
cat << EOF >> ${DST_FLAGS}
// IPROTO flag constants, generated from
// ${SRC_CONST}
EOF

grep -PB 1 "[\t ]*IPROTO_FLAG_[A-Z_]+ =" ${SRC_CONST} | \
	generate_enum Flag >> ${DST_FLAGS}

echo "${FOOTER_TEST}" > ${DST_FLAGS_TEST}

grep -PB 1 "[\t ]*IPROTO_FLAG_[A-Z_]+ =" ${SRC_CONST} | \
	generate_test Flag >> ${DST_FLAGS_TEST}

#
# Iterators.
#

echo "${FOOTER}" > ${DST_ITERATORS}
cat << EOF >> ${DST_ITERATORS}
// IPROTO iterators constants, generated from
// ${SRC_ITERATORS}
EOF

read_enum iterator_type ${SRC_ITERATORS} | \
	generate_enum Iterator >> ${DST_ITERATORS}

echo "${FOOTER_TEST}" > ${DST_ITERATORS_TEST}

read_enum iterator_type ${SRC_ITERATORS} | \
	generate_test Iterator >> ${DST_ITERATORS_TEST}

#
# Types.
#

echo "${FOOTER}" > ${DST_TYPES}
cat << EOF >> ${DST_TYPES}
// IPROTO type constants, generated from
// ${SRC_CONST}
EOF

read_enum iproto_type ${SRC_CONST} | \
	generate_enum Type >> ${DST_TYPES}

echo "${FOOTER_TEST}" > ${DST_TYPES_TEST}

read_enum iproto_type ${SRC_CONST} | \
	generate_test Type >> ${DST_TYPES_TEST}

#
# Keys.
#

echo "${FOOTER}" > ${DST_KEYS}
cat << EOF >> ${DST_KEYS}
// IPROTO key constants, generated from
// ${SRC_CONST}
EOF

read_enum iproto_key ${SRC_CONST} | \
	generate_enum Key >> ${DST_KEYS}

cat << EOF >> ${DST_KEYS}

// IPROTO metadata key constants, generated from
// ${SRC_CONST}
EOF

read_enum iproto_metadata_key ${SRC_CONST} | \
	generate_enum MetadataKey >> ${DST_KEYS}

cat << EOF >> ${DST_KEYS}

// IPROTO ballot key constants, generated from
// ${SRC_CONST}
EOF

read_enum iproto_ballot_key ${SRC_CONST} | \
	generate_enum BallotKey >> ${DST_KEYS}

cat << EOF >> ${DST_KEYS}

// IPROTO raft key constants, generated from
// ${SRC_CONST}
EOF

read_enum iproto_raft_keys ${SRC_CONST} | \
	generate_enum RaftKey >> ${DST_KEYS}

cat << EOF >> ${DST_KEYS}

// IPROTO SQL info key constants, generated from
// ${SRC_EXECUTE}
EOF

read_enum sql_info_key ${SRC_EXECUTE} | \
	generate_enum SqlInfoKey >> ${DST_KEYS}

echo "${FOOTER_TEST}" > ${DST_KEYS_TEST}

read_enum iproto_key ${SRC_CONST} | \
	generate_test Key >> ${DST_KEYS_TEST}

read_enum iproto_metadata_key ${SRC_CONST} | \
	generate_test MetadataKey >> ${DST_KEYS_TEST}

read_enum iproto_ballot_key ${SRC_CONST} | \
	generate_test BallotKey >> ${DST_KEYS_TEST}

read_enum iproto_raft_keys ${SRC_CONST} | \
	generate_test RaftKey >> ${DST_KEYS_TEST}

read_enum sql_info_key ${SRC_EXECUTE} | \
	generate_test SqlInfoKey >> ${DST_KEYS_TEST}

#
# Cleanup.
#

rm -rf ${TT_DIR}
